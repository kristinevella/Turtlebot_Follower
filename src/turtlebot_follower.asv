classdef turtlebot_follower
    properties
        RobotCmd;
        OdomSub;
        LidarSub;
    end
    methods
        function obj = turtlebot_follower()
            rosinit()

            obj.RobotCmd = rospublisher("/robot1/cmd_vel","DataFormat","struct");
            obj.OdomSub = rossubscriber("/robot1/odom","DataFormat","struct");
            obj.LidarSub = rossubscriber("/robot1/scan","DataFormat","struct");

            velMsg = rosmessage(robotCmd);

            PublishCmdVelocity(obj, robotCmd, velMsg, [0.1 0 0 0 0 0]);
            odomMsg = OdomCallback(odomSub);
            CreateLidarSubscriber(obj);
            
            velMsg.Angular.Z = obj.Velocity;
            send(obj.RobotCmd,velMsg)
            tic
            while toc < 20
              scanMsg = receive(lidarSub);
              rosPlot(scanMsg)
            end
            
            velMsg.Angular.Z = 0;
            send(robotCmd,velMsg)

        end

        function ShutdownRos()
            clear
            rosshutdown
        end

        function velMsg = GenerateVelocityMessage(obj, velocities)
            velMsg = rosmessage(obj.RobotCmd);
            velMsg.Linear.X = velocities(1,1);
            velMsg.Linear.Y = velocities(1,1);
            velMsg.Linear.Z = velocities(1,1);
            velMsg.Angular.X = velocities(1,1);
            velMsg.Angular.Y = velocities(1,1);
            velMsg.Angular.Z = velocities(1,1);
        end

        function PublishCmdVelocity(obj, velocities)
            velMsg = GenerateVelocityMessage(obj, velocities);
            send(obj.RobotCmd,velMsg)
        end

        function odomMsg = OdomCallback(odomSub)

            odomMsg = receive(odomSub,3);
            pose = odomMsg.Pose.Pose;
            x = pose.Position.X;
            y = pose.Position.Y;
            z = pose.Position.Z;
            
            % display x, y, z values
            [x y z] 
            
            quat = pose.Orientation;
            angles = quat2eul([quat.W quat.X quat.Y quat.Z]);
            
            % display orientation
            theta = rad2deg(angles(1))
        end

        function LidarCallback(lidarSub)

            scanMsg = receive(lidarSub);
            figure(1)
            rosPlot(scanMsg)
        end
    end
end

